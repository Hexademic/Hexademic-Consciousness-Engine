name: Unreal Engine C++ CI

on:
  push:
    branches: [ "Source" ]
  pull_request:
    branches: [ "Source" ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    # 1. (Optional but Recommended) Setup Unreal Engine for CI
    #    You'd typically have a pre-built engine available or use a setup action.
    #    This part can be complex depending on how you host your engine.
    #    For simplicity, let's assume a basic engine setup or a custom action handling it.
    #    For a real project, you'd likely use a Docker image with Unreal Engine pre-installed
    #    or a dedicated action like 'adamrehn/setup-ue4-build' (though for UE5+, it's more involved).
    #    Without a full engine, compilation won't succeed.

    # 2. Build your Unreal Engine project/plugin
    #    This assumes you have Unreal Engine (e.g., UE_ENGINE_ROOT environment variable)
    #    The exact path to RunUAT.sh depends on where Unreal Engine is installed on the runner.
    #    For GitHub Actions, this often means setting up a specific environment or using Docker containers.

    - name: Set up Unreal Engine (Placeholder)
      # This step is highly dependent on how you manage your UE installation in CI.
      # For a real pipeline, you'd use a Docker container with UE, or a custom action
      # that downloads/caches UE.
      # For demonstration, we'll just create a dummy path.
      run: |
        echo "Creating dummy Unreal Engine path for demonstration purposes."
        mkdir -p /opt/unreal_engine/Engine/Build/BatchFiles
        echo "UE_ENGINE_ROOT=/opt/unreal_engine" >> $GITHUB_ENV # Set an env var for later use

    - name: Build Unreal Project/Plugin
      # Replace "YourProjectName" with your actual .uproject file name
      # Replace "HexademicPlugin" with the name of the plugin you want to build if it's a plugin
      # If you're building the entire game project, use -Project
      run: |
        chmod +x "${{ env.UE_ENGINE_ROOT }}/Engine/Build/BatchFiles/RunUAT.sh"
        "${{ env.UE_ENGINE_ROOT }}/Engine/Build/BatchFiles/RunUAT.sh" BuildCookRun \
        -project="${{ github.workspace }}/YourProjectName.uproject" \
        -noP4 \
        -platform=Linux \
        -clientconfig=Development \
        -build \
        -plugin="HexademicPlugin" \ # Use this if building a specific plugin
        -skipcook \
        -pak \
        -nocompileeditor \
        -stage \
        -stagingdirectory="${{ github.workspace }}/StagingBuild" \
        -utf8output

    # 3. (Optional) Run Tests (Unreal Automation Tests)
    #    This usually involves running the cooked build with specific command-line arguments.
    - name: Run Unreal Automation Tests (Placeholder)
      # This step would execute tests defined within Unreal's Automation Test framework.
      # Requires a built executable.
      run: |
        echo "Running Unreal Automation Tests..."
        # Example: "${{ github.workspace }}/StagingBuild/LinuxNoEditor/YourProjectName/Binaries/Linux/YourProjectName-Linux-Development" -ExecCmds="Automation RunTests YourProjectName.MyTests" -log > test_results.log
        echo "Tests completed (conceptual)."

    # The 'make', 'make check', 'make distcheck' steps are not applicable for Unreal Engine.

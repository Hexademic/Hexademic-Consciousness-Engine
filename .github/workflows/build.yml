# Hexademic Consciousness Engine - Build Workflow
# Location: .github/workflows/build.yml
# This workflow builds the Unreal Engine project with comprehensive error handling,
# caching, and support for both hosted and self-hosted runners.

name: Build Hexademic Consciousness Engine

on:
  push:
    branches: [ Source, main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: [ Source, main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  workflow_dispatch:  # Allow manual triggering
    inputs:
      build_config:
        description: 'Build Configuration'
        required: true
        default: 'Development'
        type: choice
        options:
        - Development
        - Shipping
        - DebugGame
      platform:
        description: 'Target Platform'
        required: true
        default: 'Win64'
        type: choice
        options:
        - Win64
        - Linux
        - Mac

env:
  # Project configuration
  PROJECT_NAME: "Hexademic"
  UE_VERSION: "5.3"
  BUILD_CONFIG: ${{ github.event.inputs.build_config || 'Development' }}
  PLATFORM: ${{ github.event.inputs.platform || 'Win64' }}
  
  # Paths (will be set dynamically based on runner type)
  UE_ROOT: ""
  PROJECT_FILE: ""

jobs:
  # Validation job that runs on all runners
  validate:
    name: Validate Project Structure
    runs-on: windows-latest
    outputs:
      project-file: ${{ steps.find-project.outputs.project-file }}
      has-source: ${{ steps.validate.outputs.has-source }}
      engine-version: ${{ steps.validate.outputs.engine-version }}
      
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1  # Shallow clone for faster checkout
        
    - name: Find Project File
      id: find-project
      shell: powershell
      run: |
        Write-Host "üîç Searching for .uproject file..."
        $projectFiles = Get-ChildItem -Name "*.uproject" -Recurse
        
        if ($projectFiles.Count -eq 0) {
          Write-Error "‚ùå No .uproject file found!"
          exit 1
        } elseif ($projectFiles.Count -gt 1) {
          $fileList = $projectFiles -join ', '
          Write-Warning "‚ö†Ô∏è Multiple .uproject files found: $fileList"
          Write-Host "Using first found: $($projectFiles[0])"
        }
        
        $projectFile = $projectFiles[0]
        Write-Host "‚úÖ Found project file: $projectFile"
        echo "project-file=$projectFile" >> $env:GITHUB_OUTPUT
        
    - name: Validate Project Structure
      id: validate
      shell: powershell
      run: |
        Write-Host "üìã Validating project structure..."
        
        # Check critical directories
        $hasSource = Test-Path "Source"
        $hasContent = Test-Path "Content" 
        $hasConfig = Test-Path "Config"
        
        Write-Host "Source directory: $(if($hasSource){'‚úÖ'}else{'‚ùå'})"
        Write-Host "Content directory: $(if($hasContent){'‚úÖ'}else{'‚ö†Ô∏è'})"
        Write-Host "Config directory: $(if($hasConfig){'‚úÖ'}else{'‚ö†Ô∏è'})"
        
        echo "has-source=$($hasSource.ToString().ToLower())" >> $env:GITHUB_OUTPUT
        
        # Validate project file JSON
        $projectFile = "${{ steps.find-project.outputs.project-file }}"
        try {
          $content = Get-Content $projectFile -Raw | ConvertFrom-Json
          Write-Host "‚úÖ Project file is valid JSON"
          
          if ($content.EngineAssociation) {
            Write-Host "üéÆ Engine version: $($content.EngineAssociation)"
            echo "engine-version=$($content.EngineAssociation)" >> $env:GITHUB_OUTPUT
          }
          
          if ($content.Modules -and $content.Modules.Count -gt 0) {
            Write-Host "üì¶ Found $($content.Modules.Count) module(s):"
            foreach ($module in $content.Modules) {
              Write-Host "  - $($module.Name) ($($module.Type))"
            }
          } else {
            Write-Host "‚ö†Ô∏è No modules found - this might be a Blueprint-only project"
          }
          
          # Enhanced engine version validation
          $supportedVersions = @("4.27", "5.0", "5.1", "5.2", "5.3", "5.4")
          if ($content.EngineAssociation -and $content.EngineAssociation -notin $supportedVersions) {
            Write-Warning "‚ö†Ô∏è Engine version $($content.EngineAssociation) may not be fully supported"
          }
          
        } catch {
          Write-Error "‚ùå Project file JSON validation failed: $($_.Exception.Message)"
          exit 1
        }

  # Build job for self-hosted runners (recommended)
  build-self-hosted:
    name: Build (Self-Hosted)
    runs-on: self-hosted
    needs: validate
    if: ${{ needs.validate.outputs.has-source == 'true' }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        clean: true  # Ensure clean workspace
        
    - name: Setup Environment
      shell: powershell
      run: |
        Write-Host "üîß Setting up build environment..."
        
        # Detect Unreal Engine installation
        $possiblePaths = @(
          "C:\Program Files\Epic Games\UE_${{ env.UE_VERSION }}",
          "C:\UnrealEngine",
          "D:\UnrealEngine",
          "C:\Epic Games\UE_${{ env.UE_VERSION }}"
        )
        
        $ueRoot = $null
        foreach ($path in $possiblePaths) {
          if (Test-Path "$path\Engine\Build\BatchFiles\Build.bat") {
            $ueRoot = $path
            break
          }
        }
        
        if (-not $ueRoot) {
          Write-Error "‚ùå Unreal Engine ${{ env.UE_VERSION }} not found in any expected location!"
          Write-Host "Searched paths:"
          foreach ($path in $possiblePaths) { Write-Host "  - $path" }
          exit 1
        }
        
        Write-Host "‚úÖ Found Unreal Engine at: $ueRoot"
        echo "UE_ROOT=$ueRoot" >> $env:GITHUB_ENV
        
        # Set project file path
        $projectFile = Join-Path $env:GITHUB_WORKSPACE "${{ needs.validate.outputs.project-file }}"
        echo "PROJECT_FILE=$projectFile" >> $env:GITHUB_ENV
        
    - name: Clean Previous Build
      shell: powershell
      run: |
        Write-Host "üßπ Cleaning previous build artifacts..."
        
        $cleanPaths = @("Binaries", "Intermediate", "Saved\Logs")
        foreach ($path in $cleanPaths) {
          if (Test-Path $path) {
            Write-Host "Removing $path..."
            Remove-Item $path -Recurse -Force -ErrorAction SilentlyContinue
          }
        }
        
    - name: Build Project
      shell: cmd
      run: |
        echo üî® Building %PROJECT_NAME% for %PLATFORM% %BUILD_CONFIG%...
        
        "%UE_ROOT%\Engine\Build\BatchFiles\Build.bat" ^
          %PROJECT_NAME%Editor %PLATFORM% %BUILD_CONFIG% ^
          -Project="%PROJECT_FILE%" ^
          -WaitMutex ^
          -FromMsBuild ^
          -Verbose
          
        if %ERRORLEVEL% NEQ 0 (
          echo ‚ùå Build failed with error code %ERRORLEVEL%
          exit /b %ERRORLEVEL%
        )
        
        echo ‚úÖ Build completed successfully!
        
    - name: Package Project (Optional)
      if: ${{ env.BUILD_CONFIG == 'Shipping' }}
      shell: cmd
      run: |
        echo üì¶ Packaging project for distribution...
        
        "%UE_ROOT%\Engine\Build\BatchFiles\RunUAT.bat" BuildCookRun ^
          -project="%PROJECT_FILE%" ^
          -noP4 ^
          -platform=%PLATFORM% ^
          -clientconfig=%BUILD_CONFIG% ^
          -cook ^
          -allmaps ^
          -build ^
          -stage ^
          -pak ^
          -archive ^
          -archivedirectory="%GITHUB_WORKSPACE%\PackagedBuild"
          
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: ${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.BUILD_CONFIG }}
        path: |
          Binaries/
          !Binaries/**/*.pdb
        retention-days: 7
        
    - name: Upload Package (if created)
      uses: actions/upload-artifact@v4
      if: ${{ success() && env.BUILD_CONFIG == 'Shipping' }}
      with:
        name: ${{ env.PROJECT_NAME }}-Package-${{ env.PLATFORM }}
        path: PackagedBuild/
        retention-days: 30

  # Fallback build for hosted runners (limited functionality)
  build-hosted:
    name: Build (GitHub-Hosted - Limited)
    runs-on: windows-latest
    needs: validate
    if: ${{ needs.validate.outputs.has-source == 'true' && !contains(github.repository, 'self-hosted') }}
    timeout-minutes: 60
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Cache Build Tools
      uses: actions/cache@v4
      with:
        path: |
          C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools
        key: ${{ runner.os }}-buildtools-${{ hashFiles('**/*.sln', '**/*.vcxproj') }}
        restore-keys: |
          ${{ runner.os }}-buildtools-
          
    - name: Setup Build Tools
      shell: powershell
      run: |
        Write-Host "üîß Installing Visual Studio Build Tools..."
        
        try {
          # Install VS Build Tools
          $installerUrl = "https://aka.ms/vs/17/release/vs_buildtools.exe"
          Invoke-WebRequest -Uri $installerUrl -OutFile "vs_buildtools.exe"
          
          Start-Process -FilePath "vs_buildtools.exe" -ArgumentList @(
            "--quiet", 
            "--wait", 
            "--add", "Microsoft.VisualStudio.Workload.VCTools",
            "--add", "Microsoft.VisualStudio.Component.Windows10SDK.22000"
          ) -Wait
          
          Write-Host "‚úÖ Build tools installed"
        } catch {
          Write-Error "‚ùå Failed to install build tools: $($_.Exception.Message)"
          exit 1
        }
        
    - name: Simulate Build (No UE Available)
      shell: powershell
      run: |
        Write-Host "‚ö†Ô∏è GitHub-hosted runners don't have Unreal Engine installed"
        Write-Host "This job validates the project structure and prepares for building"
        Write-Host ""
        Write-Host "Project Details:"
        Write-Host "- Project File: ${{ needs.validate.outputs.project-file }}"
        Write-Host "- Engine Version: ${{ needs.validate.outputs.engine-version }}"
        Write-Host "- Has Source: ${{ needs.validate.outputs.has-source }}"
        Write-Host ""
        Write-Host "To enable full builds:"
        Write-Host "1. Set up a self-hosted runner with Unreal Engine installed"
        Write-Host "2. Or use Epic Games' official build infrastructure"
        Write-Host ""
        Write-Host "‚úÖ Project validation and environment setup completed"

  # Report build status
  report:
    name: Build Report
    runs-on: ubuntu-latest
    needs: [validate, build-self-hosted, build-hosted]
    if: always()
    
    steps:
    - name: Generate Build Report
      run: |
        echo "# üéÆ Hexademic Consciousness Engine Build Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Project:** ${{ env.PROJECT_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "**Platform:** ${{ env.PLATFORM }}" >> $GITHUB_STEP_SUMMARY
        echo "**Configuration:** ${{ env.BUILD_CONFIG }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Job status
        echo "## Job Results" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Validation | ${{ needs.validate.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Self-Hosted Build | ${{ needs.build-self-hosted.result == 'success' && '‚úÖ Passed' || needs.build-self-hosted.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Hosted Build | ${{ needs.build-hosted.result == 'success' && '‚úÖ Passed' || needs.build-hosted.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.validate.result }}" == "success" ]]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Project Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Project File:** \`${{ needs.validate.outputs.project-file }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Engine Version:** \`${{ needs.validate.outputs.engine-version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Has Source Code:** ${{ needs.validate.outputs.has-source == 'true' && 'Yes' || 'No' }}" >> $GITHUB_STEP_SUMMARY
        fi
